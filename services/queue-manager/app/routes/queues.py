from fastapi import APIRouter, Body, HTTPException
from loguru import logger

from app.models.commands import QueueStartRequest, StartTestFlowCommand, StartQueueCommand
from app.services.job_launcher import launch_job
from app.services.arango_service import save_queue_meta
from app.utils.naming import generate_ids
from app.services.testing_service import launch_test_flow

router = APIRouter(prefix="/queues", tags=["Queues"])


@router.post("/start-pipeline", summary="–ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω–≤–µ–π–µ—Ä–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö", tags=["Queues"])
async def start_pipeline(request: QueueStartRequest = Body(...)):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω–≤–µ–π–µ—Ä, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤.
    - –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π `queue_id` –¥–ª—è –≤—Å–µ–≥–æ –∫–æ–Ω–≤–µ–π–µ—Ä–∞.
    - –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∫–∞–∂–¥—ã–π –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –∏–∑ —Å–ø–∏—Å–∫–∞ `microservices` –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π Job –≤ Kubernetes.
    """
    # –î–ª—è –∫–æ–Ω–≤–µ–π–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è `type` –ø–µ—Ä–≤–æ–≥–æ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID
    primary_type = request.microservices[0].type
    ids = generate_ids(symbol=request.symbol, type_=primary_type, time_range=request.time_range)
    queue_id = ids["queue_id"]

    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω–≤–µ–π–µ—Ä–∞: {queue_id} –¥–ª—è —Å–∏–º–≤–æ–ª–∞ {request.symbol}")

    try:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –æ –≤—Å–µ–º –∫–æ–Ω–≤–µ–π–µ—Ä–µ
        await save_queue_meta(queue_id=queue_id, command=request)

        # –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥–æ–≥–æ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ –≤ –∫–æ–Ω–≤–µ–π–µ—Ä–µ
        for microservice_config in request.microservices:
            await launch_job(
                queue_id=queue_id,
                short_id=ids["short_id"],
                symbol=request.symbol,
                time_range=request.time_range,
                kafka_topic=ids["kafka_topic"],
                collection_name=ids["collection_name"], # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–µ–µ –∏–º—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏
                service_config=microservice_config,
            )
        
        logger.info(f"‚úÖ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–≤–µ–π–µ—Ä–∞ {queue_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã.")
        return {"status": "ok", "queue_id": queue_id, "ids": ids}

    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–Ω–≤–µ–π–µ—Ä–∞ {queue_id}.")
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/start-test-flow", summary="–ó–∞–ø—É—Å–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ data-flow", tags=["Testing"])
async def start_test_flow(command: StartTestFlowCommand = Body(...)):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π data-flow (–Ω–∞–ø—Ä–∏–º–µ—Ä, trades loader + arango connector).
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –±–µ—Ä–µ—Ç –∏–∑ —à–∞–±–ª–æ–Ω–∞ `test_flows.yaml`.
    """
    try:
        queue_id = await launch_test_flow(command)
        logger.info(f"üöÄ –ó–∞–ø—É—â–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π data-flow: {queue_id}")
        return {"status": "ok", "queue_id": queue_id, "message": "Test flow started"}
    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ data-flow.")
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/start", summary="(DEPRECATED) –ó–∞–ø—É—Å–∫ –æ–¥–∏–Ω–æ—á–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏", tags=["Legacy"])
async def start_queue_legacy(command: StartQueueCommand = Body(...)):
    """
    **–£—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥.** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/start-pipeline`.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ –≤ Kubernetes.
    """
    logger.warning("–í—ã–∑–≤–∞–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç /start. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start-pipeline.")
    ids = generate_ids(symbol=command.symbol, type_=command.type, time_range=command.time_range)
    queue_id = ids["queue_id"]
    
    try:
        await save_queue_meta(queue_id=queue_id, command=command)
        # –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç —Ç–µ–ø–µ—Ä—å –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º —Å launch_job, —Ç–∞–∫ –∫–∞–∫ command –Ω–µ —è–≤–ª—è–µ—Ç—Å—è MicroserviceConfig
        # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –∑–∞–≥–ª—É—à–∫—É –∏–ª–∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –æ—á–µ—Ä–µ–¥–∏ (legacy): {queue_id}")
        # await launch_job(...) # –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è
        return {"status": "deprecated", "queue_id": queue_id, "message": "This endpoint is deprecated."}

    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ—á–µ—Ä–µ–¥–∏ (legacy).")
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/list", summary="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥–µ–π")
async def list_queues():
    from app.services.arango_service import arango_service
    queues = await arango_service.list_all_queues()
    return {"queues": queues}


@router.post("/stop", summary="–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –ø–æ queue_id")
async def stop_queue(data: dict = Body(...)):
    from app.kafka.kafka_command import send_stop_command

    queue_id = data.get("queue_id")
    if not queue_id:
        raise HTTPException(status_code=400, detail="queue_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")

    await send_stop_command(queue_id=queue_id)
    return {"status": "stopping", "queue_id": queue_id}

