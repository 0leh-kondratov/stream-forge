from fastapi import APIRouter, Body, HTTPException
from loguru import logger

from app.models.commands import StartQueueCommand, StartTestFlowCommand
from app.services.job_launcher import launch_jobs
from app.services.arango_service import save_queue_meta
from app.services.queue_id_generator import generate_queue_id
from app.services.testing_service import launch_test_flow

router = APIRouter(prefix="/queues", tags=["Queues"])


@router.post("/start-test-flow", summary="–ó–∞–ø—É—Å–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ data-flow", tags=["Testing"])
async def start_test_flow(command: StartTestFlowCommand = Body(...)):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π data-flow (–Ω–∞–ø—Ä–∏–º–µ—Ä, trades loader + arango connector).
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –±–µ—Ä–µ—Ç –∏–∑ —à–∞–±–ª–æ–Ω–∞ `test_flows.yaml`.
    –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ Swagger UI.
    """
    try:
        queue_id = await launch_test_flow(command)
        logger.info(f"üöÄ –ó–∞–ø—É—â–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π data-flow: {queue_id}")
        return {"status": "ok", "queue_id": queue_id, "message": "Test flow started"}

    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ data-flow.")
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/start", summary="(Legacy) –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –æ—á–µ—Ä–µ–¥–∏", tags=["Legacy"])
async def start_queue(command: StartQueueCommand = Body(...)):
    try:
        queue_id = generate_queue_id(
            symbol=command.symbol,
            type_=command.type,
            time_range=command.time_range
        )
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –æ—á–µ—Ä–µ–¥–∏: {queue_id}")

        await save_queue_meta(queue_id=queue_id, command=command)
        await launch_jobs(queue_id=queue_id, command=command)

        return {"status": "ok", "queue_id": queue_id}

    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ—á–µ—Ä–µ–¥–∏.")
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/list", summary="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥–µ–π")
async def list_queues():
    from app.services.arango_service import list_all_queues
    queues = await list_all_queues()
    return {"queues": queues}


@router.post("/stop", summary="–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –ø–æ queue_id")
async def stop_queue(data: dict = Body(...)):
    from app.kafka.kafka_command import send_stop_command

    queue_id = data.get("queue_id")
    if not queue_id:
        raise HTTPException(status_code=400, detail="queue_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")

    await send_stop_command(queue_id=queue_id)
    return {"status": "stopping", "queue_id": queue_id}

