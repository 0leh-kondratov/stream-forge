# app/utils.py

import aiohttp
import asyncio
from datetime import datetime
from loguru import logger
from app.config import SYMBOL, TIME_RANGE, TYPE, INTERVAL, BINANCE_API_URL, BINANCE_WS_URL


def parse_time_range() -> tuple[int, int]:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ "2024-01-01:2024-01-02" –≤ timestamps –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö.
    """
    start_str, end_str = TIME_RANGE.split(":")
    start = int(datetime.strptime(start_str, "%Y-%m-%d").timestamp() * 1000)
    end = int(datetime.strptime(end_str, "%Y-%m-%d").timestamp() * 1000)
    return start, end


async def fetch_api_candles(symbol: str, interval: str = "1m", limit: int = 1000):
    """
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–≤–µ—á–µ–π —Å Binance REST API.
    """
    start, end = parse_time_range()
    url = f"{BINANCE_API_URL}/api/v3/klines"

    async with aiohttp.ClientSession() as session:
        while start < end:
            params = {
                "symbol": symbol,
                "interval": interval,
                "startTime": start,
                "endTime": end,
                "limit": limit,
            }

            async with session.get(url, params=params) as response:
                if response.status != 200:
                    text = await response.text()
                    raise RuntimeError(f"–û—à–∏–±–∫–∞ Binance API: {response.status} - {text}")

                data = await response.json()

                if not data:
                    logger.info("‚õî –ù–µ—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç Binance.")
                    break

                yield data
                last_timestamp = data[-1][0]
                start = last_timestamp + 60_000  # —à–∞–≥ –≤ 1 –º–∏–Ω—É—Ç—É

            await asyncio.sleep(0.3)


async def fetch_ws_stream(symbol: str, stream_type: str = "kline", interval: str = "1m"):
    """
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å Binance WebSocket stream.
    stream_type –º–æ–∂–µ—Ç –±—ã—Ç—å 'kline', 'trade', 'depth' –∏ —Ç.–ø.
    """
    stream = f"{symbol.lower()}@{stream_type}{interval}" if stream_type == "kline" else f"{symbol.lower()}@{stream_type}"
    url = f"{BINANCE_WS_URL}/{stream}"

    async with aiohttp.ClientSession() as session:
        async with session.ws_connect(url) as ws:
            logger.info(f"üîå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {url}")
            async for msg in ws:
                if msg.type == aiohttp.WSMsgType.TEXT:
                    data = msg.json()
                    yield [data]
                elif msg.type == aiohttp.WSMsgType.ERROR:
                    logger.error(f"–û—à–∏–±–∫–∞ WebSocket: {msg.data}")
                    break


async def fetch_binance_data():
    """
    –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å Binance –ø–æ TYPE.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: api_candles_1m, ws_candles_1m, ws_trades –∏ –¥—Ä.
    """
    if TYPE.startswith("api_candles"):
        interval = TYPE.split("_")[-1]
        async for chunk in fetch_api_candles(SYMBOL, interval):
            yield chunk

    elif TYPE.startswith("ws_candles"):
        interval = TYPE.split("_")[-1]
        async for chunk in fetch_ws_stream(SYMBOL, stream_type="kline", interval=interval):
            yield chunk

    elif TYPE == "ws_trades":
        async for chunk in fetch_ws_stream(SYMBOL, stream_type="trade"):
            yield chunk

    else:
        raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π TYPE: {TYPE}")
