- name: Fetch artifacts (if jobs on different runners)
  # Если tests/build и badges в одном workflow и не сохраняют артефакты через upload/download,
  # этот шаг не нужен. Иначе — добавь upload в tests и download здесь.

- name: Install jq + xmlstarlet + curl
  run: |
    sudo apt-get update -y
    sudo apt-get install -y jq xmlstarlet curl

- name: Parse pytest JSON (counts, duration)
  id: q
  run: |
    set -euo pipefail
    # Extract counts from pytest-json-report
    TOTAL=$(jq '.summary.total' pytest-report.json)
    PASSED=$(jq '.summary.passed' pytest-report.json)
    FAILED=$(jq '.summary.failed' pytest-report.json)
    SKIPPED=$(jq '.summary.skipped' pytest-report.json // 0)
    XFAILED=$(jq '.summary.xfailed' pytest-report.json // 0)
    XPASSED=$(jq '.summary.xpassed' pytest-report.json // 0)
    ERROR=$(jq '.summary.errors' pytest-report.json // 0)

    DURATION=$(jq -r '.duration' pytest-report.json)
    # Pass rate in %
    if [ "$TOTAL" -gt 0 ]; then
      PASS_RATE=$(python - <<'PY'
import os
total=int(os.environ["TOTAL"]); passed=int(os.environ["PASSED"])
print(round(100.0*passed/total,2))
PY
)
    else
      PASS_RATE=0
    fi

    echo "total=$TOTAL" >> $GITHUB_OUTPUT
    echo "passed=$PASSED" >> $GITHUB_OUTPUT
    echo "failed=$FAILED" >> $GITHUB_OUTPUT
    echo "skipped=$SKIPPED" >> $GITHUB_OUTPUT
    echo "xfailed=$XFAILED" >> $GITHUB_OUTPUT
    echo "xpassed=$XPASSED" >> $GITHUB_OUTPUT
    echo "errors=$ERROR" >> $GITHUB_OUTPUT
    echo "duration=$DURATION" >> $GITHUB_OUTPUT
    echo "pass_rate=$PASS_RATE" >> $GITHUB_OUTPUT

- name: Parse coverage.xml (line-rate)
  id: cov
  run: |
    set -euo pipefail
    # coverage.xml from pytest-cov (Cobertura-like)
    # Try Cobertura format: <coverage line-rate="0.87" ...>
    LINE_RATE=$(xmlstarlet sel -t -v "/coverage/@line-rate" coverage.xml 2>/dev/null || true)
    if [ -z "$LINE_RATE" ]; then LINE_RATE=0; fi
    COV_PCT=$(python - <<'PY'
import os
lr=os.environ.get("LINE_RATE","0")
try: print(round(float(lr)*100,2))
except: print(0)
PY
)
    echo "coverage_pct=$COV_PCT" >> $GITHUB_OUTPUT

- name: Make badges dir
  run: mkdir -p badges/github

- name: Render SVG badges (quality)
  run: |
    urlenc () { python - <<'PY'
import sys, urllib.parse
print(urllib.parse.quote(sys.argv[1]))
PY
    }

    # Coverage badge
    CLAB=$(urlenc "coverage")
    CMSG=$(urlenc "${{ steps.cov.outputs.coverage_pct }}%")
    CCOL="yellow"
    # color bands for coverage
    python - <<'PY'
import os
cov=float(os.environ.get("COV",0))
# pick a color band
if cov >= 90: col="brightgreen"
elif cov >= 80: col="green"
elif cov >= 70: col="yellowgreen"
elif cov >= 60: col="yellow"
elif cov >= 50: col="orange"
else: col="red"
print(col)
PY
    > /tmp/cov_color.txt
    CCOL=$(cat /tmp/cov_color.txt)
    curl -sL "https://img.shields.io/badge/${CLAB}-${CMSG}-${CCOL}.svg" -o badges/github/tests-coverage.svg

    # Pass rate badge
    PLAB=$(urlenc "pass rate")
    PMSG=$(urlenc "${{ steps.q.outputs.pass_rate }}%")
    # color similar to coverage
    python - <<'PY'
import os
pr=float(os.environ.get("PR",0))
if pr >= 99: col="brightgreen"
elif pr >= 95: col="green"
elif pr >= 85: col="yellowgreen"
elif pr >= 70: col="yellow"
elif pr >= 50: col="orange"
else: col="red"
print(col)
PY
    > /tmp/pr_color.txt
    PR="${{ steps.q.outputs.pass_rate }}"
    PRCOL=$(cat /tmp/pr_color.txt)
    curl -sL "https://img.shields.io/badge/${PLAB}-${PMSG}-${PRCOL}.svg" -o badges/github/tests-passrate.svg

    # Totals badge
    TLAB=$(urlenc "tests")
    TMSG=$(urlenc "total:${{ steps.q.outputs.total }} passed:${{ steps.q.outputs.passed }} failed:${{ steps.q.outputs.failed }}")
    curl -sL "https://img.shields.io/badge/${TLAB}-${TMSG}-informational.svg" -o badges/github/tests-totals.svg

    # Duration badge
    DLAB=$(urlenc "duration")
    DMSG=$(urlenc "${{ steps.q.outputs.duration }}s")
    curl -sL "https://img.shields.io/badge/${DLAB}-${DMSG}-blue.svg" -o badges/github/tests-duration.svg

- name: Commit quality badges
  if: github.ref == 'refs/heads/main'
  run: |
    git config user.name "github-actions[bot]"
    git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
    git add badges/github/tests-coverage.svg \
            badges/github/tests-passrate.svg \
            badges/github/tests-totals.svg \
            badges/github/tests-duration.svg
    git commit -m "chore: update test-quality badges (cov/pass-rate/totals/duration)" || echo "No changes"
    git push
