name: dummy-service â€” tests, build, badges

on:
  push:
    branches: [ main ]
    paths:
      - "services/dummy-service/**"
      - ".github/workflows/dummy-service-ci.yml"
      - "README.md"
  pull_request:
    branches: [ main ]
    paths:
      - "services/dummy-service/**"
      - ".github/workflows/dummy-service-ci.yml"
  workflow_dispatch:
    inputs:
      run_tests_only:
        description: "Skip build and only run tests?"
        required: false
        type: boolean
        default: false
      enable_integration:
        description: "Run integration tests as well?"
        required: false
        type: boolean
        default: false
      extra_tag:
        description: "Optional tag to push in addition to VERSION/branch/sha"
        required: false
        type: string
        default: ""

permissions:
  contents: write     # commit badges
  packages: write     # pull base image, push to GHCR

env:
  IMAGE_REGISTRY: ghcr.io
  IMAGE_NAME: 0leh-kondratov/dummy-service
  SERVICE_DIR: services/dummy-service

jobs:
  tests:
    name: Unit tests (in BASE_IMAGE)
    runs-on: ubuntu-latest
    continue-on-error: true              # tests won't block the pipeline
    container:
      image: ghcr.io/0leh-kondratov/stream-forge-base:v0.1.3
      credentials:
        # Use your secrets as requested
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN }}

    defaults:
      run:
        working-directory: ${{ env.SERVICE_DIR }}

    env:
      # Make local package imports (e.g., from app.*) resolvable
      PYTHONPATH: ${{ github.workspace }}/services/dummy-service
      # Toggle to run integration tests in CI
      ENABLE_INTEGRATION: ${{ github.event.inputs.enable_integration || 'false' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show runtime
        run: |
          echo "Runner: $RUNNER_OS"
          python --version
          pip --version

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles(format('{0}/requirements*.txt', env.SERVICE_DIR)) }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install app + test deps
        run: |
          python -m pip install -r requirements.txt
          # separate file with test-only deps (see tests/requirements-test.txt below)
          python -m pip install -r tests/requirements-test.txt

      - name: Run pytest with reports (unit by default)
        run: |
          if [ "${ENABLE_INTEGRATION}" = "true" ]; then
            PYTEST_FILTER=""
          else
            PYTEST_FILTER='-k "not integration"'
          fi

          # JSON + coverage reports for quality badges
          set -e
          pytest -q tests ${PYTEST_FILTER} \
            --json-report --json-report-file=pytest-report.json \
            --cov=. --cov-report=term --cov-report=xml:coverage.xml \
            --junitxml=pytest-report.xml || true

          # show summary on console
          echo "---- pytest summary ----"
          python - <<'PY'
import json, pathlib
p = pathlib.Path("pytest-report.json")
if p.exists():
    data = json.loads(p.read_text())
    s = data.get("summary", {})
    print("total:", s.get("total"), "passed:", s.get("passed"),
          "failed:", s.get("failed"), "skipped:", s.get("skipped"),
          "xfailed:", s.get("xfailed"), "xpassed:", s.get("xpassed"),
          "errors:", s.get("errors"))
PY

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dummy-tests-artifacts
          path: |
            services/dummy-service/pytest-report.json
            services/dummy-service/coverage.xml
            services/dummy-service/pytest-report.xml
          if-no-files-found: ignore

  build:
    name: Build & Push image (GHCR)
    needs: tests
    # run even if tests failed; skip only if user asked tests-only
    if: ${{ always() && !fromJson(github.event.inputs.run_tests_only || 'false') }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Read VERSION
        id: ver
        run: |
          echo "version=$(cat ${SERVICE_DIR}/VERSION)" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR (push)
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ${{ env.IMAGE_REGISTRY }} -u ${{ github.actor }} --password-stdin

      - name: Docker metadata (tags & labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.ver.outputs.version }}
            type=ref,event=branch
            type=sha,prefix=sha-,format=short
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=raw,value=${{ github.event.inputs.extra_tag }},enable=${{ github.event.inputs.extra_tag != '' }}
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ steps.ver.outputs.version }}

      - name: Build & Push (dummy-service)
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.SERVICE_DIR }}
          file: ${{ env.SERVICE_DIR }}/Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

  badges:
    name: Generate badges (tests + build)
    needs: [tests, build]
    if: ${{ always() }}     # always generate badges for any outcome
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download test artifacts
        uses: actions/download-artifact@v4
        with:
          name: dummy-tests-artifacts
          path: badges/_artifacts
        continue-on-error: true

      - name: Install jq + xmlstarlet + curl
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq xmlstarlet curl

      - name: Prepare results and colors
        id: s
        run: |
          set -euo pipefail
          tests_result="${{ needs.tests.result }}"   # success/failure/cancelled/skipped
          build_result="${{ needs.build.result }}"   # success/failure/cancelled/skipped

          to_color() {
            case "$1" in
              success) echo "success" ;;      # green
              failure) echo "critical" ;;     # red
              cancelled) echo "inactive" ;;   # gray
              skipped) echo "informational" ;;# blue
              *) echo "lightgrey" ;;
            esac
          }

          echo "tests_result=$tests_result" >> $GITHUB_OUTPUT
          echo "build_result=$build_result" >> $GITHUB_OUTPUT
          echo "tests_color=$(to_color "$tests_result")" >> $GITHUB_OUTPUT
          echo "build_color=$(to_color "$build_result")" >> $GITHUB_OUTPUT

      - name: Parse pytest JSON & coverage
        id: q
        run: |
          set -euo pipefail
          J="badges/_artifacts/pytest-report.json"
          C="badges/_artifacts/coverage.xml"

          if [ -f "$J" ]; then
            TOTAL=$(jq '.summary.total' "$J")
            PASSED=$(jq '.summary.passed' "$J")
            FAILED=$(jq '.summary.failed' "$J")
            SKIPPED=$(jq '.summary.skipped // 0' "$J")
            XFAILED=$(jq '.summary.xfailed // 0' "$J")
            XPASSED=$(jq '.summary.xpassed // 0' "$J")
            ERRORS=$(jq '.summary.errors // 0' "$J")
            DURATION=$(jq -r '.duration' "$J")
          else
            TOTAL=0; PASSED=0; FAILED=0; SKIPPED=0; XFAILED=0; XPASSED=0; ERRORS=0; DURATION="0"
          fi

          if [ "$TOTAL" -gt 0 ]; then
            PASS_RATE=$(python - <<'PY'
import os
total=int(os.environ["TOTAL"]); passed=int(os.environ["PASSED"])
print(round(100.0*passed/total,2))
PY
)
          else
            PASS_RATE=0
          fi

          # coverage %
          if [ -f "$C" ]; then
            LINE_RATE=$(xmlstarlet sel -t -v "/coverage/@line-rate" "$C" 2>/dev/null || true)
            [ -z "$LINE_RATE" ] && LINE_RATE=0
            COV_PCT=$(python - <<'PY'
import os
lr=os.environ.get("LINE_RATE","0")
try: print(round(float(lr)*100,2))
except: print(0)
PY
)
          else
            COV_PCT=0
          fi

          {
            echo "total=$TOTAL"
            echo "passed=$PASSED"
            echo "failed=$FAILED"
            echo "skipped=$SKIPPED"
            echo "xfailed=$XFAILED"
            echo "xpassed=$XPASSED"
            echo "errors=$ERRORS"
            echo "duration=$DURATION"
            echo "pass_rate=$PASS_RATE"
            echo "coverage_pct=$COV_PCT"
          } >> $GITHUB_OUTPUT

      - name: Ensure badges dir
        run: mkdir -p badges/github

      - name: Render SVG badges (tests/build status + quality)
        run: |
          urlenc () { python - <<'PY'
import sys, urllib.parse
print(urllib.parse.quote(sys.argv[1]))
PY
          }

          # Status badges
          TLAB=$(urlenc "tests"); TMSG=$(urlenc "${{ steps.s.outputs.tests_result }}")
          BLAB=$(urlenc "build"); BMSG=$(urlenc "${{ steps.s.outputs.build_result }}")

          curl -sL "https://img.shields.io/badge/${TLAB}-${TMSG}-${{ steps.s.outputs.tests_color }}.svg" -o badges/github/tests-status.svg
          curl -sL "https://img.shields.io/badge/${BLAB}-${BMSG}-${{ steps.s.outputs.build_color }}.svg" -o badges/github/build-status.svg

          # Coverage badge
          CLAB=$(urlenc "coverage")
          CMSG=$(urlenc "${{ steps.q.outputs.coverage_pct }}%")
          # pick color band for coverage
          python - <<'PY'
import os
cov=float(os.environ.get("COV",0))
if cov >= 90: col="brightgreen"
elif cov >= 80: col="green"
elif cov >= 70: col="yellowgreen"
elif cov >= 60: col="yellow"
elif cov >= 50: col="orange"
else: col="red"
print(col)
PY
          > /tmp/cov_color.txt
          CCOL=$(cat /tmp/cov_color.txt)
          curl -sL "https://img.shields.io/badge/${CLAB}-${CMSG}-${CCOL}.svg" -o badges/github/tests-coverage.svg

          # Pass rate badge
          PLAB=$(urlenc "pass rate")
          PMSG=$(urlenc "${{ steps.q.outputs.pass_rate }}%")
          python - <<'PY'
import os
pr=float(os.environ.get("PR",0))
if pr >= 99: col="brightgreen"
elif pr >= 95: col="green"
elif pr >= 85: col="yellowgreen"
elif pr >= 70: col="yellow"
elif pr >= 50: col="orange"
else: col="red"
print(col)
PY
          > /tmp/pr_color.txt
          PRCOL=$(cat /tmp/pr_color.txt)
          curl -sL "https://img.shields.io/badge/${PLAB}-${PMSG}-${PRCOL}.svg" -o badges/github/tests-passrate.svg

          # Totals badge
          TQLAB=$(urlenc "tests")
          TQMSG=$(urlenc "total:${{ steps.q.outputs.total }} passed:${{ steps.q.outputs.passed }} failed:${{ steps.q.outputs.failed }}")
          curl -sL "https://img.shields.io/badge/${TQLAB}-${TQMSG}-informational.svg" -o badges/github/tests-totals.svg

          # Duration badge
          DLAB=$(urlenc "duration")
          DMSG=$(urlenc "${{ steps.q.outputs.duration }}s")
          curl -sL "https://img.shields.io/badge/${DLAB}-${DMSG}-blue.svg" -o badges/github/tests-duration.svg

      - name: Also write JSON (optional endpoints)
        run: |
          cat > badges/tests-status.json <<EOF
          { "schemaVersion": 1, "label": "tests", "message": "${{ steps.s.outputs.tests_result }}", "color": "${{ steps.s.outputs.tests_color }}" }
          EOF
          cat > badges/build-status.json <<EOF
          { "schemaVersion": 1, "label": "build", "message": "${{ steps.s.outputs.build_result }}", "color": "${{ steps.s.outputs.build_color }}" }
          EOF

      - name: Commit badges to repo (main only)
        if: github.ref == 'refs/heads/main'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add badges/github/*.svg badges/*.json
          git commit -m "chore: update tests/build badges and quality badges" || echo "No changes"
          git push
