name: dummy-service â€” test & build (dynamic badges, svg + json)

on:
  push:
    branches: [ main ]
    paths:
      - "services/dummy-service/**"
      - ".github/workflows/dummy-service-ci.yml"
      - "README.md"
  pull_request:
    branches: [ main ]
    paths:
      - "services/dummy-service/**"
      - ".github/workflows/dummy-service-ci.yml"
  workflow_dispatch:
    inputs:
      run_tests_only:
        description: "Skip build and only run tests?"
        required: false
        type: boolean
        default: false
      extra_tag:
        description: "Optional tag to push in addition to VERSION/branch/sha (e.g. 'rc' or 'staging')"
        required: false
        type: string
        default: ""

permissions:
  contents: write    # commit badges (json/svg)
  packages: write    # pull base image, push build to GHCR

env:
  IMAGE_REGISTRY: ghcr.io
  IMAGE_NAME: 0leh-kondratov/dummy-service
  SERVICE_DIR: services/dummy-service

jobs:
  tests:
    name: Unit tests (in BASE_IMAGE)
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/0leh-kondratov/stream-forge-base:v0.1.3
      # Use GHCR_TOKEN provided as a repository/organization secret
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN }}

    defaults:
      run:
        working-directory: ${{ env.SERVICE_DIR }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show runtime
        run: |
          echo "Runner: $RUNNER_OS"
          python --version
          pip --version
          docker version || true

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles(format('{0}/requirements*.txt', env.SERVICE_DIR)) }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install test deps
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx

      - name: Run pytest
        run: pytest -q tests

  build:
    name: Build & Push image (GHCR)
    needs: tests
    runs-on: ubuntu-latest
    if: ${{ !fromJson(github.event.inputs.run_tests_only || 'false') }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Read VERSION
        id: ver
        run: |
          echo "version=$(cat ${SERVICE_DIR}/VERSION)" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR (push)
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ${{ env.IMAGE_REGISTRY }} -u ${{ github.actor }} --password-stdin

      - name: Docker metadata (tags & labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.ver.outputs.version }}
            type=ref,event=branch
            type=sha,prefix=sha-,format=short
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=raw,value=${{ github.event.inputs.extra_tag }},enable=${{ github.event.inputs.extra_tag != '' }}
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ steps.ver.outputs.version }}

      - name: Build & Push (dummy-service)
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.SERVICE_DIR }}
          file: ${{ env.SERVICE_DIR }}/Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

      # --- Dynamic badges (JSON + SVG) ---
      - name: Install tooling (jq + skopeo + curl)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq skopeo curl

      - name: Compute digests & sizes for :latest and :VERSION
        id: info
        run: |
          set -euo pipefail

          IMG="${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}"
          VER="${{ steps.ver.outputs.version }}"
          BRANCH="${GITHUB_REF_NAME}"

          # Compute digest for :VERSION using raw manifest hash
          DIGEST_VERSION=$(skopeo inspect --raw "docker://${IMG}:${VER}" | sha256sum | awk '{print "sha256:"$1}')
          DIGEST_LATEST=""
          # Only compute latest on main
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            DIGEST_LATEST=$(skopeo inspect --raw "docker://${IMG}:latest" | sha256sum | awk '{print "sha256:"$1}')
          fi

          # Sizes (sum of layer sizes) for version and latest (if exists)
          SIZE_VERSION=$(skopeo inspect --raw "docker://${IMG}@${DIGEST_VERSION}" | jq -r '
            if .layers then
              [ .layers[].size ] | add
            else
              ( try (.manifests | map(.size) | add) // 0 )
            end
          ')
          SIZE_LATEST="0"
          if [ -n "$DIGEST_LATEST" ]; then
            SIZE_LATEST=$(skopeo inspect --raw "docker://${IMG}@${DIGEST_LATEST}" | jq -r '
              if .layers then
                [ .layers[].size ] | add
              else
                ( try (.manifests | map(.size) | add) // 0 )
              end
            ')
          fi

          # Short digests for nice look
          SHORT_VER=$(echo "$DIGEST_VERSION" | sed 's/^sha256://; s/^\(........\).*/\1/')
          SHORT_LATEST=""
          if [ -n "$DIGEST_LATEST" ]; then
            SHORT_LATEST=$(echo "$DIGEST_LATEST" | sed 's/^sha256://; s/^\(........\).*/\1/')
          fi

          # Human readable sizes
          hr () {
            num=$1
            if [ "$num" = "0" ] || [ -z "$num" ]; then
              echo "n/a"
              return
            fi
            awk -v bytes="$num" 'function human(x){ s="B KB MB GB TB PB"; while (x>=1024 && length(s)>1){x/=1024; s=substr(s, index(s," ")+1)} return sprintf("%.1f %s", x, substr(s,1,index(s," ")-1)) } BEGIN{ print human(bytes) }'
          }
          HR_SIZE_VERSION=$(hr "$SIZE_VERSION")
          HR_SIZE_LATEST=$(hr "$SIZE_LATEST")

          NOW=$(date -u +"%Y-%m-%d %H:%M UTC")

          mkdir -p badges badges/github

          # --- JSON badges (for Shields endpoint) ---
          cat > badges/dummy-version.json <<EOF
          { "schemaVersion": 1, "label": "version", "message": "${VER}", "color": "informational" }
          EOF

          cat > badges/dummy-digest-version.json <<EOF
          { "schemaVersion": 1, "label": "digest (ver)", "message": "${SHORT_VER}", "color": "blue" }
          EOF

          cat > badges/dummy-size-version.json <<EOF
          { "schemaVersion": 1, "label": "image size (ver)", "message": "${HR_SIZE_VERSION}", "color": "green" }
          EOF

          cat > badges/dummy-updated.json <<EOF
          { "schemaVersion": 1, "label": "updated", "message": "${NOW}", "color": "success" }
          EOF

          if [ -n "${DIGEST_LATEST}" ]; then
          cat > badges/dummy-digest-latest.json <<EOF
          { "schemaVersion": 1, "label": "digest (latest)", "message": "${SHORT_LATEST}", "color": "blue" }
          EOF

          cat > badges/dummy-size-latest.json <<EOF
          { "schemaVersion": 1, "label": "image size (latest)", "message": "${HR_SIZE_LATEST}", "color": "green" }
          EOF
          fi

          # --- SVG badges (saved into repo) ---
          urlenc () {
            # simple URL-encoder for spaces and some symbols used here
            python - <<'PY'
import sys, urllib.parse
print(urllib.parse.quote(sys.argv[1]))
PY
          }

          VLAB=$(urlenc "version")
          VMSG=$(urlenc "${VER}")
          curl -sL "https://img.shields.io/badge/${VLAB}-${VMSG}-informational.svg" -o badges/github/dummy-version.svg

          DVER_LAB=$(urlenc "digest (ver)")
          DVER_MSG=$(urlenc "${SHORT_VER}")
          curl -sL "https://img.shields.io/badge/${DVER_LAB}-${DVER_MSG}-blue.svg" -o badges/github/dummy-digest-version.svg

          SVER_LAB=$(urlenc "image size (ver)")
          SVER_MSG=$(urlenc "${HR_SIZE_VERSION}")
          curl -sL "https://img.shields.io/badge/${SVER_LAB}-${SVER_MSG}-green.svg" -o badges/github/dummy-size-version.svg

          UPD_LAB=$(urlenc "updated")
          UPD_MSG=$(urlenc "${NOW}")
          curl -sL "https://img.shields.io/badge/${UPD_LAB}-${UPD_MSG}-success.svg" -o badges/github/dummy-updated.svg

          if [ -n "${SHORT_LATEST}" ]; then
            DLT_LAB=$(urlenc "digest (latest)")
            DLT_MSG=$(urlenc "${SHORT_LATEST}")
            curl -sL "https://img.shields.io/badge/${DLT_LAB}-${DLT_MSG}-blue.svg" -o badges/github/dummy-digest-latest.svg

            SLT_LAB=$(urlenc "image size (latest)")
            SLT_MSG=$(urlenc "${HR_SIZE_LATEST}")
            curl -sL "https://img.shields.io/badge/${SLT_LAB}-${SLT_MSG}-green.svg" -o badges/github/dummy-size-latest.svg
          fi

          echo "ver_digest=${DIGEST_VERSION}" >> $GITHUB_OUTPUT
          if [ -n "${DIGEST_LATEST}" ]; then
            echo "latest_digest=${DIGEST_LATEST}" >> $GITHUB_OUTPUT
          fi

      - name: Commit badges (json + svg) to repo (main only)
        if: github.ref == 'refs/heads/main'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add badges/*.json badges/github/*.svg
          git commit -m "chore: update dynamic badges (json+svg) for dummy-service ${{ steps.ver.outputs.version }}" || echo "No changes"
          git push
