.build_python_service:
  stage: build
  image: ${KANIKO_IMAGE}
  script:
    - echo "BASE_IMAGE = $BASE_IMAGE"
    - echo "SERVICE_NAME = $SERVICE_NAME"
    - echo "SERVICE_PATH = $SERVICE_PATH"
    - SERVICE_VERSION=$(cat $CI_PROJECT_DIR/$SERVICE_PATH/VERSION)
    - mkdir -p /kaniko/.docker
    - echo '{"auths":{"$CI_REGISTRY":{"username":"$CI_REGISTRY_USER","password":"$CI_REGISTRY_PASSWORD"}}}' > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR/$SERVICE_PATH --dockerfile Dockerfile --destination $CI_REGISTRY_IMAGE:$SERVICE_VERSION --build-arg BASE_IMAGE=$BASE_IMAGE --destination $CI_REGISTRY_IMAGE:latest --cache=true --cache-repo "$CI_REGISTRY_IMAGE/cache"
    - echo "success" > build_status.txt # Write success status
  after_script: # Add after_script to handle failure
    - if [ "$CI_JOB_STATUS" == "failed" ]; then echo "failure" > build_status.txt; fi
  artifacts:
    paths: 
      - $SERVICE_PATH/VERSION
      - build_status.txt # New artifact
    expire_in: 1 hour
  rules:
    # NOTE: GitLab CI does not substitute variables in rules:changes. 
    # If $SERVICE_PATH is a variable, this rule will not work as expected.
    # Use literal paths or consider child pipelines for dynamic paths.
    - if: $CI_COMMIT_BRANCH == "main"
      changes:
        - $SERVICE_PATH/**/*
    - when: manual

.update_badge_python_service:
  stage: badges
  image: ${KANIKO_IMAGE}
  before_script:
    - git config --global user.email "gitlab-ci@dmz.home"
    - git config --global user.name "GitLab CI"
    - git config --global --add safe.directory "$CI_PROJECT_DIR"
  script:
    - |
      BRANCH_NAME="ci/badges-${SERVICE_NAME}-${CI_COMMIT_SHORT_SHA}"
      MR_TITLE="CI: Update ${SERVICE_NAME} badges"
      git checkout -b "${BRANCH_NAME}"
      echo "Updating badges for ${SERVICE_NAME}..."

      # Parse build_status.txt to determine build status
      BUILD_STATUS=$(cat build_status.txt)

      if [ "$BUILD_STATUS" == "success" ]; then
        BADGE_COLOR="brightgreen"
        BADGE_TEXT="passing"
      else
        BADGE_COLOR="red"
        BADGE_TEXT="failing"
      fi

      mkdir -p badges/main
      curl -s "https://img.shields.io/badge/build-${SERVICE_NAME}-${BADGE_TEXT}-${BADGE_COLOR}" > "badges/main/build-${SERVICE_NAME}.svg"
      git add "badges/main/build-${SERVICE_NAME}.svg"
      SERVICE_VERSION=$(cat $SERVICE_PATH/VERSION)
      curl -s "https://img.shields.io/badge/version-${SERVICE_VERSION}-blue" > "badges/main/version-${SERVICE_NAME}.svg"
      git add "badges/main/version-${SERVICE_NAME}.svg"
      if git diff --staged --quiet; then
        echo "No changes to badge files. Nothing to do."
        exit 0
      fi
      git commit -m "${MR_TITLE}"
      git push         -o merge_request.create         -o merge_request.target=main         -o merge_request.title="${MR_TITLE}"         -o merge_request.merge_when_pipeline_succeeds         -o merge_request.remove_source_branch         "https://oauth2:${GIT_PUSH_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git"         "${BRANCH_NAME}"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      changes:
        - $SERVICE_PATH/**/*
      when: on_success

.test_python_service:
  stage: test
  image: registry.dmz.home/kinga/stream-forge/base:v0.1.3 # Using the unified base image
  allow_failure: true
  script:
    - pip install -r $CI_PROJECT_DIR/$SERVICE_PATH/requirements.txt
    - pip install -r $CI_PROJECT_DIR/$SERVICE_PATH/requirements-test.txt
    - python -m pytest -n auto $CI_PROJECT_DIR/$SERVICE_PATH/tests/ --ignore=$CI_PROJECT_DIR/$SERVICE_PATH/tests/integration/ --junitxml=${SERVICE_NAME}-${CI_COMMIT_SHORT_SHA}-report.xml 
  artifacts:
    when: always
    paths:
      - ${SERVICE_NAME}-${CI_COMMIT_SHORT_SHA}-report.xml
    reports:
      junit: ${SERVICE_NAME}-${CI_COMMIT_SHORT_SHA}-report.xml
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      changes:
        - $SERVICE_PATH/**/*
    - when: manual

.update_badge_test_python_service:
  stage: badges
  image: ${KANIKO_IMAGE}
  needs:
    - test-${SERVICE_NAME}
  before_script:
    - git config --global user.email "gitlab-ci@dmz.home"
    - git config --global user.name "GitLab CI"
    - git config --global --add safe.directory "$CI_PROJECT_DIR"
  script:
    - |
      BRANCH_NAME="ci/badges-test-${SERVICE_NAME}-${CI_COMMIT_SHORT_SHA}"
      MR_TITLE="CI: Update test badge for ${SERVICE_NAME}"
      git checkout -b "${BRANCH_NAME}"
      echo "Updating test badge for ${SERVICE_NAME}"

      # Parse report.xml to determine test status
      python3 scripts/parse_junit.py report.xml > badge_status.env

      source badge_status.env

      mkdir -p badges/main
      curl -s "https://img.shields.io/badge/test-${SERVICE_NAME}-${BADGE_TEXT}-${BADGE_COLOR}" > "badges/main/test-${SERVICE_NAME}.svg"
      git add "badges/main/test-${SERVICE_NAME}.svg"
      if git diff --staged --quiet; then
        echo "No changes to badge files. Nothing to do."
        exit 0
      fi
      git commit -m "${MR_TITLE}"
      git push \
        -o merge_request.create \
        -o merge_request.target=main \
        -o merge_request.title="${MR_TITLE}" \
        -o merge_request.merge_when_pipeline_succeeds \
        -o merge_request.remove_source_branch \
        "https://oauth2:${GIT_PUSH_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git" \
        "${BRANCH_NAME}"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      changes:
        - $SERVICE_PATH/**/*
      when: on_success

.integration_test_python_service:
  stage: integration-test
  image: ${CI_REGISTRY_IMAGE}:latest # Use the built image
  needs:
    - build-${SERVICE_NAME} # Depends on the build job
  variables:
    # Pass Kafka/ArangoDB connection details to the test environment
    KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
    KAFKA_USER: ${KAFKA_USER}
    KAFKA_PASSWORD: ${KAFKA_PASSWORD}
    KAFKA_CA_PATH: ${KAFKA_CA_PATH}
    ARANGO_URL: ${ARANGO_URL}
    ARANGO_DB: ${ARANGO_DB}
    # ... other relevant environment variables for the service
  before_script:
    # Ensure curl is available for health checks and install dependencies
    - apt-get update && apt-get install -y curl
    - pip install -r $CI_PROJECT_DIR/$SERVICE_PATH/requirements.txt
    - echo "--- INSTALLED PACKAGES ---" && pip list && echo "------------------------"
    # Start the service in the background from the correct directory
    - (cd $CI_PROJECT_DIR/$SERVICE_PATH && python -m app.main --noop &)
    # Wait for the service to be ready (e.g., check its /metrics endpoint)
    - |
      echo "Waiting for service to start..."
      for i in $(seq 1 30); do
        if curl -s http://localhost:8080/metrics > /dev/null; then
          echo "Service is up!"
          break
        fi
        echo "Service not ready yet. Waiting ${i}s..."
        sleep ${i}
      done
      curl http://localhost:8080/metrics # Show metrics for debugging
  script:
    # Run integration tests
    - pytest $CI_PROJECT_DIR/$SERVICE_PATH/tests/integration/ --junitxml=${SERVICE_NAME}-${CI_COMMIT_SHORT_SHA}-integration_report.xml
  artifacts:
    when: always
    paths:
      - ${SERVICE_NAME}-${CI_COMMIT_SHORT_SHA}-integration_report.xml
    reports:
      junit: ${SERVICE_NAME}-${CI_COMMIT_SHORT_SHA}-integration_report.xml
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      changes:
        - $SERVICE_PATH/**/*
    - when: manual

.update_badge_integration_test_python_service:
  stage: badges
  image: ${KANIKO_IMAGE}
  needs:
    - integration-test-${SERVICE_NAME}
  before_script:
    - git config --global user.email "gitlab-ci@dmz.home"
    - git config --global user.name "GitLab CI"
    - git config --global --add safe.directory "$CI_PROJECT_DIR"
  script:
    - |
      BRANCH_NAME="ci/badges-integration-test-${SERVICE_NAME}-${CI_COMMIT_SHORT_SHA}"
      MR_TITLE="CI: Update integration test badge for ${SERVICE_NAME}"
      git checkout -b "${BRANCH_NAME}"
      echo "Updating integration test badge for ${SERVICE_NAME}..."

      # Parse integration_report.xml to determine test status
      python3 scripts/parse_junit.py integration_report.xml > badge_status.env

      source badge_status.env

      mkdir -p badges/main
      curl -s "https://img.shields.io/badge/integration--test-${SERVICE_NAME}-${BADGE_TEXT}-${BADGE_COLOR}" > "badges/main/integration-test-${SERVICE_NAME}.svg"
      git add "badges/main/integration-test-${SERVICE_NAME}.svg"
      if git diff --staged --quiet; then
        echo "No changes to badge files. Nothing to do."
        exit 0
      fi
      git commit -m "${MR_TITLE}"
      git push \
        -o merge_request.create \
        -o merge_request.target=main \
        -o merge_request.title="${MR_TITLE}" \
        -o merge_request.merge_when_pipeline_succeeds \
        -o merge_request.remove_source_branch \
        "https://oauth2:${GIT_PUSH_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git" \
        "${BRANCH_NAME}"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      changes:
        - $SERVICE_PATH/**/*
      when: on_success

.update_badge_deploy_python_service:
  stage: badges
  image: ${KANIKO_IMAGE}
  needs:
    - deploy-${SERVICE_NAME}
  before_script:
    - git config --global user.email "gitlab-ci@dmz.home"
    - git config --global user.name "GitLab CI"
    - git config --global --add safe.directory "$CI_PROJECT_DIR"
  script:
    - |
      BRANCH_NAME="ci/badges-deploy-${SERVICE_NAME}-${CI_COMMIT_SHORT_SHA}"
      MR_TITLE="CI: Update deploy badge for ${SERVICE_NAME}"
      git checkout -b "${BRANCH_NAME}"
      echo "Updating deploy badge for ${SERVICE_NAME}..."

      # Parse deploy_status.txt to determine deploy status
      DEPLOY_STATUS=$(cat deploy_status.txt)

      if [ "$DEPLOY_STATUS" == "success" ]; then
        BADGE_COLOR="brightgreen"
        BADGE_TEXT="deployed"
      else
        BADGE_COLOR="red"
        BADGE_TEXT="failed"
      fi

      mkdir -p badges/main
      curl -s "https://img.shields.io/badge/deploy-${SERVICE_NAME}-${BADGE_TEXT}-${BADGE_COLOR}" > "badges/main/deploy-${SERVICE_NAME}.svg"
      git add "badges/main/deploy-${SERVICE_NAME}.svg"
      if git diff --staged --quiet; then
        echo "No changes to badge files. Nothing to do."
        exit 0
      fi
      git commit -m "${MR_TITLE}"
      git push \
        -o merge_request.create \
        -o merge_request.target=main \
        -o merge_request.title="${MR_TITLE}" \
        -o merge_request.merge_when_pipeline_succeeds \
        -o merge_request.remove_source_branch \
        "https://oauth2:${GIT_PUSH_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git" \
        "${BRANCH_NAME}"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      changes:
        - $SERVICE_PATH/**/*
      when: on_success
